// This autogenerated skeleton file illustrates one way to adapt a synchronous
// interface into an asynchronous interface. You should copy it to another
// filename to avoid overwriting it and rewrite as asynchronous any functions
// that would otherwise introduce unwanted latency.

#include "Twitter.h"
#include <thrift/protocol/TBinaryProtocol.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::async;

using namespace  ::example;

class TwitterAsyncHandler : public TwitterCobSvIf {
 public:
  TwitterAsyncHandler() {
    syncHandler_ = std::auto_ptr<TwitterHandler>(new TwitterHandler);
    // Your initialization goes here
  }
  virtual ~TwitterAsyncHandler();

  void sendString(::apache::thrift::stdcxx::function<void(std::string const& _return)> cob, const std::string& data) {
    std::string _return;
    syncHandler_->sendString(_return, data);
    return cob(_return);
  }

 protected:
  std::auto_ptr<TwitterHandler> syncHandler_;
};

